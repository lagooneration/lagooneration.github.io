/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import React, { useRef, useEffect } from 'react'
import {  useTexture } from '@react-three/drei'
// import meshToonMaterial from '@react-three/drei'
// import gradient from '/assets/images/3.jpg'
// import * as THREE from 'three'



// export function Brainmodel(props) {

//   const { nodes, materials } = useGLTF('/models/brainlite.glb');

//   const texture = useTexture('/assets/images/3.jpg');

 
//   // console.log(nodes, materials)
//   return (
//     <group {...props} dispose={null}>
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.Brain_Part_04.geometry}
//       >
//          <meshToonMaterial 
//           attach="material" 
//           map={texture}
//           transparent={false}
//           opacity={1}
//           // color={materials.BRAIN_PROCEDURAL_TEXTURE.color}
//           // side={THREE.DoubleSide}
//         />
//         {/* <meshToonMaterial attach="material" color={materials.BRAIN_PROCEDURAL_TEXTURE.color} /> */}
//       </mesh>
//     </group>
//   )
// }

// useGLTF.preload('/models/brainlite.glb')

// export default Brainmodel;


import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'


export function Brainmodel(props : JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/models/brainlite.glb')
  // const texture = useTexture('/assets/images/3.jpg');
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Brain_Model.geometry}
        material={nodes.Brain_Model.material}
        
      />
      {/* <meshToonMaterial 
          attach="material" 
          map={texture}
          transparent={true}
          opacity={0.2}
          // color={materials.BRAIN_PROCEDURAL_TEXTURE.color}
          // side={THREE.DoubleSide}
        /> */}
        <meshNormalMaterial
         wireframe={true}
           attach="material"
          />
    </group>
  )
}

useGLTF.preload('/models/brainlite.glb')